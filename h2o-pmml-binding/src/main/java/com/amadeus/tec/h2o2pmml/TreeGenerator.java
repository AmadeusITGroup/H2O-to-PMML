package com.amadeus.tec.h2o2pmml;

import java.io.File;
import java.io.IOException;
import java.io.StringWriter;
import java.nio.charset.StandardCharsets;

import com.amadeus.tec.h2o2pmml.binary.bind.H2OBinaryUnmarshaller;
import com.amadeus.tec.h2o2pmml.h2omodelini.bind.H2OModelIniUnmarshaller;
import com.amadeus.tec.h2o2pmml.h2omodelini.pojo.H2OModel;
import com.amadeus.tec.h2o2pmml.xml.bind.JAXBMarshaller;
import com.amadeus.tec.h2o2pmml.xml.pmmlpojo.H2O2PMMLFactory;

/**
 * @author ahockkoon
 * Unmarshall H2O GBM source files (model.ini, domain files, and binary trees) and marshall XML String representing H2O tree respecting PMML 4.3
 */
public class TreeGenerator {
	
	private H2OModel model;
	
	/**
	 * Constructs a TreeGenerator object parameterized by generated from H2O model.ini and domain files as inputs.
	 * Default encoding StandardCharsets.UTF_8.
	 * @param modelIni H2O model.ini file generated during the GBM training
	 * @param domainFolder folder containing all the domain files (e.g. d000.txt) generated by H2O during the GBM training
	 * @throws IOException
	 */
	public TreeGenerator(File modelIni, File domainFolder) throws IOException {
		this.model = H2OModelIniUnmarshaller.unmarshal(modelIni, domainFolder, StandardCharsets.UTF_8);
	}
	
	public H2OModel getModel() {
		return model;
	}

	public void setModel(H2OModel model) {
		this.model = model;
	}
	
	public void setModel(File modelIni, File domainFolder) throws IOException {
		this.model = H2OModelIniUnmarshaller.unmarshal(modelIni, domainFolder, StandardCharsets.UTF_8);
	}
	
	/**
	 * Parses the input H2O binary tree File and generate its equivalent PMML 4.3 compliant XML String
	 * @param binaryTree H2O binary tree files (e.g. t00_000.bin)
	 * @return PMML 4.3 compliant XML String representation of the input H2O binary tree File
	 * @throws Exception
	 */
	public String generateXMLString(File binaryTree) throws Exception {
		if(binaryTree.exists()) {
			StringWriter stringWriter = new StringWriter();
			JAXBMarshaller.marshal(H2O2PMMLFactory.createPMMLfromH2OTree(H2OBinaryUnmarshaller.unmarshal(binaryTree), model), stringWriter);
			return stringWriter.toString();
		} else {
			throw new Exception("Input file DOES NOT EXIST: " + binaryTree.getPath());
		}
	}

}
