package com.amadeus.tec.h2o2pmml.h2omodelini.bind;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.List;

import com.amadeus.tec.h2o2pmml.file.FileUtils;
import com.amadeus.tec.h2o2pmml.h2omodelini.pojo.H2OModel;
import com.amadeus.tec.h2o2pmml.h2omodelini.pojo.H2OModelFactory;

/**
 * @author ahockkoon
 * Unmarshaller class to create an H2OModel POJOs from H2O model.ini and domain files (e.g. d000.txt)
 *
 */
public class H2OModelIniUnmarshaller {
	
	/**
	 * @param modelFile H2O model.ini file generated during the GBM training
	 * @param domainFolder folder containing all the domain files (e.g. d000.txt) generated by H2O during the GBM training
	 * @param encoding
	 * @return H2OModel representing the metadata to interpret the binary tree
	 * @throws IOException
	 */
	public static H2OModel unmarshal(File modelFile, File domainFolder, Charset encoding) throws IOException {
		List<String> lines = FileUtils.readAllLines(modelFile, encoding);
		return H2OModelFactory.createH2OModel(lines, domainFolder);
	}

}
